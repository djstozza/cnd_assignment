initMap = function () {
  var map = new google.maps.Map(document.getElementById('map'), {
    center: {lat: gon.current_user.latitude, lng: gon.current_user.longitude},
    zoom: 1,
    streetViewControl: false,
    mapTypeControlOptions: {
      mapTypeIds: ['moon']
    }
  });

  var moonMapType = new google.maps.ImageMapType({
    getTileUrl: function(coord, zoom) {
      var normalizedCoord = getNormalizedCoord(coord, zoom);
      if (!normalizedCoord) {
        return null;
      }
      var bound = Math.pow(2, zoom);
      return '//mw1.google.com/mw-planetary/lunar/lunarmaps_v1/clem_bw' +
          '/' + zoom + '/' + normalizedCoord.x + '/' +
          (bound - normalizedCoord.y - 1) + '.jpg';
    },
    tileSize: new google.maps.Size(256, 256),
    maxZoom: 9,
    minZoom: 1,
    radius: 1738000,
    name: 'Moon'
  });
  
  map.mapTypes.set('moon', moonMapType);
  map.setMapTypeId('moon');

  var userLatLng = {lat: gon.current_user.latitude, lng: gon.current_user.longitude}
  var base_icon = "<%= image_path 'spaceport-2.png' %>"
  var user_marker = new google.maps.Marker({
    icon: base_icon,
    position: userLatLng,
    map: map,
    title: gon.current_user.username
  });
  user_marker.setMap(map);
  
  var userContentString = '<div id="content">'+
        '<div id="siteNotice">'+
        '</div>'+
        '<h2 id="firstHeading" class="firstHeading">' + gon.current_user.username +'</h2>'+
        '<div id="bodyContent">'+
        '<p><b>Latitude:</b> ' + gon.current_user.latitude + ', <b>Longitude:</b> ' + gon.current_user.longitude + '</p>'+
        '</div>'+
        '</div>';

  var userInfoWindow = new google.maps.InfoWindow({
    content: userContentString
  });

  user_marker.addListener('click', function() {
    userInfoWindow.open(map, user_marker);
  });
  
  var carIcon = "<%= image_path 'carrental.png' %>";

  if ($('div.mapShow').length > 0) {
    var carLatLng = {lat: gon.car.latitude, lng: gon.car.longitude};

    var marker = new google.maps.Marker({
      icon: carIcon,
      position: carLatLng,
      map: map,
      title: 'Car ' + gon.car.vehicle_id
    });
    marker.setMap(map);

    
    
    var contentString = '<div id="content">'+
        '<div id="siteNotice">'+
        '</div>'+
        '<h2 id="firstHeading" class="firstHeading">Car ' + gon.car.vehicle_id +'</h2>'+
        '<div id="bodyContent">'+
        '<p><b>Latitude:</b> ' + gon.car.latitude + ', <b>Longitude:</b> ' + gon.car.longitude + '</p>'+
        '<p><b>Distance from ' + gon.current_user.username + ': </b> ' + distance(userLatLng, carLatLng) + '</p>'+
        '</div>'+
        '</div>';

    var infowindow = new google.maps.InfoWindow({
      content: contentString
    });

    marker.addListener('click', function() {
      infowindow.open(map, marker);
    });
  
  } else if ($('div.indexMap').length > 0) {
    _.each(gon.cars, function (car) {
      var carLatLng = {lat: car.latitude, lng: car.longitude};

      var marker = new google.maps.Marker({
        icon: carIcon,
        position: carLatLng,
        map: map,
        title: 'Car ' + car.vehicle_id
      });
      marker.setMap(map);

      // var latLngA = new google.maps.LatLng(gon.current_user.latitude, gon.current_user.longitude);
      // var latLngB = new google.maps.LatLng(car.latitude, car.longitude);
      // var distance = google.maps.geometry.spherical.computeDistanceBetween(latLngA,latLngB);
     
      var contentString = '<div id="content">'+
        '<div id="siteNotice">'+
        '</div>'+
        '<h2 id="firstHeading" class="firstHeading">Car ' + car.vehicle_id +'</h2>'+
        '<div id="bodyContent">'+
        '<p><b>Latitude:</b> ' + car.latitude + ', <b>Longitude:</b> ' + car.longitude + '</p>'+
        '<p><b>Distance from ' + gon.current_user.username + ': </b> ' + distance(userLatLng, carLatLng) + '</p>'+  
        '</div>'+
        '</div>';

      var infowindow = new google.maps.InfoWindow({
        content: contentString
      });

      marker.addListener('click', function() {
        infowindow.open(map, marker);
      }); 
      
      
    })

  }
  
}

//Haversine Formula - finding shortest distance between two coordinates over a sphere. Initially used the google.maps.geometry.spherical.computeDistanceBetween( latLngA, latLngB ) plugin, however, that uses a the Earth's radius 6371km. This would mean that all the distance calculations would be out significantly.

distance = function (latlng1, latlng2) {
  var R = 1731, // Radius of the Moon, in km.
  dLat = (latlng2.lat - latlng1.lat) * (Math.PI/180),
  dLon = (latlng2.lng - latlng1.lng) * (Math.PI/180),
  a = Math.sin(dLat/2)*Math.sin(dLat/2) +
      Math.cos(latlng1.lat * (Math.PI/180)) *
      Math.cos(latlng2.lat * (Math.PI/180)) *
      Math.sin(dLon/2) * Math.sin(dLon/2),
  c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)),
  d = R * c;
  console.log(parseInt(d*1.03));
  return parseInt(Math.ceil(d*1.0029)) + ' km'; //JavaScript formula slightly off ruby calcs by between 1.027 and 1.035... I trust ruby over javascript when it comes to calculations...
}


// Normalizes the coords that tiles repeat across the x axis (horizontally)
// like the standard Google map tiles.
getNormalizedCoord = function (coord, zoom) {
  var y = coord.y;
  var x = coord.x;

  // tile range in one direction range is dependent on zoom level
  // 0 = 1 tile, 1 = 2 tiles, 2 = 4 tiles, 3 = 8 tiles, etc
  var tileRange = 1 << zoom;

  // don't repeat across y-axis (vertically)
  if (y < 0 || y >= tileRange) {
    return null;
  }

  // repeat across x-axis
  if (x < 0 || x >= tileRange) {
    x = (x % tileRange + tileRange) % tileRange;
  }

  return {x: x, y: y};
}